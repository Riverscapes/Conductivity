# file name:	predict_cond.py
# description:	This tool automates the process of predicting conductivity values for a stream network. Based on a table
#               of summarized model parameters (output from the Pre-process Environmental Parameters tool) , a Random Forest
#               (RF) model is applied to the parameter table using an external R script.  After the R script is called, the
#               RF prediction is then joined back to the input stream network.
# author:		Jesse Langdon
# dependencies: ESRI arcpy module, built-in Python modules
# version:		0.2

import arcpy
import subprocess
import os.path
import sys
import gc
import metadata.metadata_project as meta

arcpy.env.overwriteOutput = True

# input variables
in_fc = arcpy.GetParameterAsText(0) # stream network polyline feature class (i.e. segments)
in_params = arcpy.GetParameterAsText(1) # filepath to the dbf file with summarized parameters ( i.e. ws_cond_param.dbf)
in_xml = arcpy.GetParameterAsText(2) # Riverscapes project XML file
out_fc = arcpy.GetParameterAsText(3) # stream network polyline feature class, with predicted conductivity

# TODO testing
# in_fc = r"C:\JL\Testing\conductivity\Riverscapes\inputs.gdb\seg1000m"
# in_params = r"C:\JL\Testing\conductivity\Riverscapes\outputs\ws_cond_param.dbf"
# in_xml = r"C:\JL\Testing\conductivity\Riverscapes\outputs\polystat_test.xml"
# out_fc = r"C:\JL\Testing\conductivity\Riverscapes\outputs\pred_cond_test.shp"

# constants
MODEL_RF = "rf17bCnd9" # name of random forest model (source: Carl Saunders, ELR)


def checkLineOID(in_fc):
    """Checks the input upstream catchment area polygon feature class for the
    presence of an attribute field named 'LineOID'.

    Args:
        in_fc: Input upstream catchment area polygon feature class

    Returns:
        A boolean true or false value.
    """
    fieldName = "LineOID"
    fields = arcpy.ListFields(in_fc, fieldName)
    for field in fields:
        if field.name == fieldName:
            return True
        else:
            return False

def metadata(ecXML):
    """Builds and writes an XML file according to the Riverscapes Project specifications

        Args:
            ecXML: Project XML object instance
    """

    # Finalize metadata
    timeStart, timeStop, timeProcess = ecXML.finalize()

    ecXML.getOperator()
    # Add Meta tags
    ecXML.addMeta("Model", MODEL_RF, ecXML.project)
    ecXML.addMeta("Predict Start Time", timeStart, ecXML.project)
    ecXML.addMeta("Predict Stop Time", timeStop, ecXML.project)
    ecXML.addMeta("Predict Process Time", timeProcess, ecXML.project)
    # Add project Input tags
    ecXML.addProjectInput("Vector", "Segmented Stream Network", in_fc, ecXML.project, "SEG", ecXML.getUUID(), "True")
    # Add realization input tags
    ecXML.addECInput(ecXML.project, "Vector", "SEG", "True")
    # Add analysis output tags
    ecXML.addOutput("Vector", "Predicted Electrical Conductivity", out_fc, ecXML.project, "PRED",
                    ecXML.getUUID())
    ecXML.write()

def main(in_fc, in_params, in_xml, out_fc):
    """Main processing function for the Predict Conductivity tool.

    Args:
        in_fc: Input stream network polyline feature class
        in_params: table of summarized model parameter values
        in_xml: the project XML file generated by polystat_cond.py
        out_fc: Output stream network polyline feature class, with predicted conductivity values joined
        as new attribute fields.
    """

    if checkLineOID(in_fc) == True:
        arcpy.AddMessage("Predicting conductivity using Random Forest model in R...")
        gc.enable() # turn on automatic garbage collection
        out_dir = os.path.dirname(out_fc) # get output directory path

        # initiate project XML object and start processing timestamp
        projectXML = meta.ProjectXML("predict", in_xml)

        # variables for the subprocess function
        scriptPathName = os.path.realpath(__file__)
        pathName = os.path.dirname(scriptPathName)
        scriptName = 'condRF.R'
        modelName = 'rf17bCnd9.rdata'
        rScriptPath = os.path.join(pathName, scriptName)
        modelPath = os.path.join(pathName, modelName)

        argR = [modelPath, out_dir, in_params] # list of arguments for condRF.R script

        cmd = ['Rscript', rScriptPath] + argR # construct R command line argument

        # send command to predict_conductivity.r
        process = subprocess.Popen(cmd, universal_newlines=True, shell=True)
        process.wait()

        # predictive output
        predictedCondCSV = out_dir + "\\predicted_cond.csv"
        arcpy.TableToTable_conversion(predictedCondCSV, out_dir, r"predicted_cond.dbf")

        # join conductivity predictive output to stream segment feature class
        arcpy.AddMessage("Joining predicted conductivity results to the stream network...")
        arcpy.MakeTableView_management(out_dir + r"\predicted_cond.dbf", "predicted_cond_view")
        arcpy.MakeFeatureLayer_management(in_fc, "in_fc_lyr")
        arcpy.FeatureClassToFeatureClass_conversion("in_fc_lyr", r"in_memory", "in_fc_tmp")
        arcpy.JoinField_management(r"in_memory\in_fc_tmp", "LineOID", "predicted_cond_view", "LineOID")
        arcpy.MakeFeatureLayer_management(r"in_memory\in_fc_tmp", "join_fc_lyr")
        arcpy.AddMessage("Exporting final feature class as " + out_fc)
        arcpy.CopyFeatures_management("join_fc_lyr", out_fc)

        # clean up temporary files
        arcpy.Delete_management(out_dir + r"\predicted_cond.dbf")
        arcpy.Delete_management(out_dir + r"\predicted_cond.csv")
        gc.disable()

        # finalize and write XML file
        metadata(projectXML)

        arcpy.AddMessage("Conductivity prediction process complete!")
    else:
        arcpy.AddMessage("The LineOID attribute field is missing! Cancelling process...")
        sys.exit(0) # terminate process
    return

if __name__ == "__main__":
    main(in_fc, in_params, in_xml, out_fc)